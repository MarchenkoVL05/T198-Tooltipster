/* Tooltipster v3.3.0 */ (function (e, t, n) {
  // Polyfill: Element.matches
   if (!Element.prototype.matches) {
       Element.prototype.matches =
           Element.prototype.matchesSelector ||
           Element.prototype.msMatchesSelector ||
           Element.prototype.mozMatchesSelector ||
           Element.prototype.webkitMatchesSelector ||
           Element.prototype.oMatchesSelector;
   }

   // Polyfill: Element.closest
   if (!Element.prototype.closest) {
       Element.prototype.closest = function (s) {
           var el = this;
           while (el && el.nodeType === 1) {
               if (Element.prototype.matches.call(el, s)) {
                   return el;
               }
               el = el.parentElement || el.parentNode;
           }
           return null;
       };
   }
  
  function s(t, n) {
        this.bodyOverflowX;
        this.callbacks = { hide: [], show: [] };
        this.checkInterval = null;
        this.Content;
        this.$el = e(t);
        this.$elProxy;
        this.elProxyPosition;
        this.enabled = true;
        this.options = e.extend({}, i, n);
        this.mouseIsOverProxy = false;
        this.namespace = "tooltipster-" + Math.round(Math.random() * 1e5);
        this.Status = "hidden";
        this.timerHide = null;
        this.timerShow = null;
        this.$tooltip;
        this.options.iconTheme = this.options.iconTheme.replace(".", "");
        this.options.theme = this.options.theme.replace(".", "");
        this._init();
      }
      function o(t, n) {
        var r = true;
        Array.prototype.forEach.call(t, function (e, i) {
          if (typeof n[e] === "undefined" || t[e] !== n[e]) {
            r = false;
            return false;
          }
        });
        return r;
      }
      function f() {
        return !a && u;
      }
      function l() {
        var e = n.body || n.documentElement,
          t = e.style,
          r = "transition";
        if (typeof t[r] == "string") {
          return true;
        }
        (v = ["Moz", "Webkit", "Khtml", "O", "ms"]), (r = r.charAt(0).toUpperCase() + r.substr(1));
        for (var i = 0; i < v.length; i++) {
          if (typeof t[v[i] + r] == "string") {
            return true;
          }
        }
        return false;
      }
      var r = "tooltipster",
        i = {
          animation: "fade",
          arrow: true,
          arrowColor: "",
          autoClose: true,
          content: null,
          contentAsHTML: false,
          contentCloning: true,
          debug: true,
          delay: 200,
          minWidth: 0,
          maxWidth: null,
          functionInit: function (e, t) {},
          functionBefore: function (e, t) {
            t();
          },
          functionReady: function (e, t) {},
          functionAfter: function (e) {},
          hideOnClick: false,
          icon: "(?)",
          iconCloning: true,
          iconDesktop: false,
          iconTouch: false,
          iconTheme: "tooltipster-icon",
          interactive: false,
          interactiveTolerance: 350,
          multiple: false,
          offsetX: 0,
          offsetY: 0,
          onlyOne: false,
          position: "top",
          positionTracker: false,
          positionTrackerCallback: function (e) {
            if (this.option("trigger") == "hover" && this.option("autoClose")) {
              this.style.display = "none";
            }
          },
          restoration: "current",
          speed: 350,
          timer: 0,
          theme: "tooltipster-default",
          touchDevices: true,
          trigger: "hover",
          updateAnimation: true,
        };
      s.prototype = {
        _init: function () {
          var t = this;
          if (n.querySelector) {
            var r = null;
            if (t.$el.getAttribute("data-tooltipster-initialTitle") === undefined) {
              r = t.$el.getAttribute("title");
              if (r === undefined) r = null;
              t.$el.getAttribute("data-tooltipster-initialTitle", r);
            }
            if (t.options.content !== null) {
              t._content_set(t.options.content);
            } else {
              t._content_set(r);
            }
            var i = t.options.functionInit.call(t.$el, t.$el, t.Content);
            if (typeof i !== "undefined") t._content_set(i);
            t.$el.removeAttribute("title");
            t.$el.classlist.add("tooltipstered");
            if ((!u && t.options.iconDesktop) || (u && t.options.iconTouch)) {
              if (typeof t.options.icon === "string") {
                t.$elProxy = e('<span class="' + t.options.iconTheme + '"></span>');
                t.$elProxy.textContent = t.options.icon;
              } else {
                if (t.options.iconCloning) t.$elProxy = t.options.icon.cloneNode(true);
                else t.$elProxy = t.options.icon;
              }
              t.$elProxy.parentNode.insertBefore(t.$el, t.$elProxy.nextSibling);
            } else {
              t.$elProxy = t.$el;
            }
            if (t.options.trigger == "hover") {
              t.$elProxy
                .addEventListener("mouseenter." + t.namespace, function () {
                  if (!f() || t.options.touchDevices) {
                    t.mouseIsOverProxy = true;
                    t._show();
                  }
                })
                .addEventListener("mouseleave." + t.namespace, function () {
                  if (!f() || t.options.touchDevices) {
                    t.mouseIsOverProxy = false;
                  }
                });
              if (u && t.options.touchDevices) {
                t.$elProxy.addEventListener("touchstart." + t.namespace, function () {
                  t._showNow();
                });
              }
            } else if (t.options.trigger == "click") {
              t.$elProxy.addEventListener("click." + t.namespace, function () {
                if (!f() || t.options.touchDevices) {
                  t._show();
                }
              });
            }
          }
        },
        _show: function () {
          var e = this;
          if (e.Status != "shown" && e.Status != "appearing") {
            if (e.options.delay) {
              e.timerShow = setTimeout(function () {
                if (e.options.trigger == "click" || (e.options.trigger == "hover" && e.mouseIsOverProxy)) {
                  e._showNow();
                }
              }, e.options.delay);
            } else e._showNow();
          }
        },
        _showNow: function (n) {
          var r = this;
          r.options.functionBefore.call(r.$el, r.$el, function () {
            if (r.enabled && r.Content !== null) {
              if (n) r.callbacks.show.push(n);
              r.callbacks.hide = [];
              clearTimeout(r.timerShow);
              r.timerShow = null;
              clearTimeout(r.timerHide);
              r.timerHide = null;
              if (r.options.onlyOne) {
                var notTooltipstered = [];
                var e_tech = e(".tooltipstered");
                for (var i = 0; i < e_tech.length; i++) {
                  if (e_tech[i].querySelector(r.$el)) {
                    continue;
                  } else {
                    notTooltipstered.push(e_tech[i]);
                  }
                }
                Array.prototype.forEach.call(notTooltipstered, function (t, n) {
                    var r = e(n),
                      i = r.getAttribute("data-tooltipster-ns");
                      Array.prototype.forEach.call(i, function (e, t) {
                      var n = r.data(t),
                        i = n.status(),
                        s = n.option("autoClose");
                      if (i !== "hidden" && i !== "disappearing" && s) {
                        n.style.disable = "none";
                      }
                    });
                  });
              }
              var i = function () {
                r.Status = "shown";
                Array.prototype.forEach.call(r.callbacks.show, function (e, t) {
                  t.call(r.$el);
                });
                r.callbacks.show = [];
              };
              if (r.Status !== "hidden") {
                var s = 0;
                if (r.Status === "disappearing") {
                  r.Status = "appearing";
                  if (l()) {
                    r.$tooltip.classlist.remove("tooltipster-dying");
                    r.$tooltip.classlist.add("tooltipster-" + r.options.animation + "-show");
                    if (r.options.speed > 0) r.$tooltip.delay(r.options.speed);
                    r.$tooltip.queue(i);
                  } else {
                    r.$tooltip.stop().fadeIn(i);
                  }
                } else if (r.Status === "shown") {
                  i();
                }
              } else {
                r.Status = "appearing";
                var s = r.options.speed;
                r.bodyOverflowX = document.querySelector("body").style.overflowX;
                document.querySelector("body").style.overflowX  = "hidden";
                var o = "tooltipster-" + r.options.animation,
                  a =
                    "-webkit-transition-duration: " +
                    r.options.speed +
                    "ms; -webkit-animation-duration: " +
                    r.options.speed +
                    "ms; -moz-transition-duration: " +
                    r.options.speed +
                    "ms; -moz-animation-duration: " +
                    r.options.speed +
                    "ms; -o-transition-duration: " +
                    r.options.speed +
                    "ms; -o-animation-duration: " +
                    r.options.speed +
                    "ms; -ms-transition-duration: " +
                    r.options.speed +
                    "ms; -ms-animation-duration: " +
                    r.options.speed +
                    "ms; transition-duration: " +
                    r.options.speed +
                    "ms; animation-duration: " +
                    r.options.speed +
                    "ms;",
                  f = r.options.minWidth ? "min-width:" + Math.round(r.options.minWidth) + "px;" : "",
                  c = r.options.maxWidth ? "max-width:" + Math.round(r.options.maxWidth) + "px;" : "",
                  h = r.options.interactive ? "pointer-events: auto;" : "";
                r.$tooltip = e(
                  '<div class="tooltipster-base ' +
                    r.options.theme +
                    '" style="' +
                    f +
                    " " +
                    c +
                    " " +
                    h +
                    " " +
                    a +
                    '"><div class="tooltipster-content"></div></div>'
                );
                if (l()) r.$tooltip.classlist.add(o);
                r._content_insert();
                r.$tooltip.appendChild("body");
                r.reposition();
                r.options.functionReady.call(r.$el, r.$el, r.$tooltip);
                if (l()) {
                  r.$tooltip.classlist.add(o + "-show");
                  if (r.options.speed > 0) r.$tooltip.delay(r.options.speed);
                  r.$tooltip.queue(i);
                } else {
                  r.$tooltip.style.display = "none";
                }
                r._interval_set();
                e(t).addEventListener("scroll." + r.namespace + " resize." + r.namespace, function () {
                  r.reposition();
                });
                if (r.options.autoClose) {
                  document.querySelector("body").removeEventListener("." + r.namespace);
                  if (r.options.trigger == "hover") {
                    if (u) {
                      setTimeout(function () {
                        document.querySelector("body").addEventListener("touchstart." + r.namespace, function () {
                          r.hide();
                        });
                      }, 0);
                    }
                    if (r.options.interactive) {
                      if (u) {
                        r.$tooltip.addEventListener("touchstart." + r.namespace, function (e) {
                          e.stopPropagation();
                        });
                      }
                      var p = null;
                      r.$elProxy
                        .add(r.$tooltip)
                        .addEventListener("mouseleave." + r.namespace + "-autoClose", function () {
                          clearTimeout(p);
                          p = setTimeout(function () {
                            r.style.display = "none";
                          }, r.options.interactiveTolerance);
                        })
                        .addEventListener("mouseenter." + r.namespace + "-autoClose", function () {
                          clearTimeout(p);
                        });
                    } else {
                      r.$elProxy.addEventListener("mouseleave." + r.namespace + "-autoClose", function () {
                        r.style.display = "none";
                      });
                    }
                    if (r.options.hideOnClick) {
                      r.$elProxy.addEventListener("click." + r.namespace + "-autoClose", function () {
                        r.style.display = "none";
                      });
                    }
                  } else if (r.options.trigger == "click") {
                    setTimeout(function () {
                      e("body").addEventListener("click." + r.namespace + " touchstart." + r.namespace, function () {
                        r.style.display = "none";
                      });
                    }, 0);
                    if (r.options.interactive) {
                      r.$tooltip.addEventListener("click." + r.namespace + " touchstart." + r.namespace, function (e) {
                        e.stopPropagation();
                      });
                    }
                  }
                }
              }
              if (r.options.timer > 0) {
                r.timerHide = setTimeout(function () {
                  r.timerHide = null;
                  r.style.display = "none";
                }, r.options.timer + s);
              }
            }
          });
        },
        _interval_set: function () {
          var t = this;
          t.checkInterval = setInterval(function () {
            if (
              document.querySelector("body").querySelector(t.$el).length === 0 ||
              document.querySelector("body").querySelector(t.$elProxy).length === 0 ||
              t.Status == "hidden" ||
              document.querySelector("body").querySelector(t.$tooltip).length === 0
            ) {
              if (t.Status == "shown" || t.Status == "appearing") t.style.display = "none";
              t._interval_cancel();
            } else {
              if (t.options.positionTracker) {
                var n = t._repositionInfo(t.$elProxy),
                  r = false;
                if (o(n.dimension, t.elProxyPosition.dimension)) {
                  if (t.$elProxy.style.position === "fixed") {
                    if (o(n.position, t.elProxyPosition.position)) r = true;
                  } else {
                    if (o(n.offset, t.elProxyPosition.offset)) r = true;
                  }
                }
                if (!r) {
                  t.reposition();
                  t.options.positionTrackerCallback.call(t, t.$el);
                }
              }
            }
          }, 200);
        },
        _interval_cancel: function () {
          clearInterval(this.checkInterval);
          this.checkInterval = null;
        },
        _content_set: function (e) {
          if (typeof e === "object" && e !== null && this.options.contentCloning) {
            e = e.cloneNode(true);
          }
          this.Content = e;
        },
        _content_insert: function () {
          var e = this,
            t = this.$tooltip.querySelector(".tooltipster-content");
          if (typeof e.Content === "string" && !e.options.contentAsHTML) {
            t.textContent = e.Content;
          } else {
            while(t.firstChild)
              t.removeChild(t.firstChild);
            t.appendChild(e.Content);
          }
        },
        _update: function (e) {
          var t = this;
          t._content_set(e);
          if (t.Content !== null) {
            if (t.Status !== "hidden") {
              t._content_insert();
              t.reposition();
              if (t.options.updateAnimation) {
                if (l()) {

                     t.$tooltip.style.width = "",
                     t.$tooltip.style.webkitTransition = "all " + t.options.speed + "ms, width 0ms, height 0ms, left 0ms, top 0ms",
                     t.$tooltip.style.mozTransition = "all " + t.options.speed + "ms, width 0ms, height 0ms, left 0ms, top 0ms",
                     t.$tooltip.style.oTransition = "all " + t.options.speed + "ms, width 0ms, height 0ms, left 0ms, top 0ms",
                     t.$tooltip.style.msTransition = "all " + t.options.speed + "ms, width 0ms, height 0ms, left 0ms, top 0ms",
                     t.$tooltip.style.transition = "all " + t.options.speed + "ms, width 0ms, height 0ms, left 0ms, top 0ms",
                     t.$tooltip.classlist.add("tooltipster-content-changing");
                  setTimeout(function () {
                    if (t.Status != "hidden") {
                      t.$tooltip.classlist.remove("tooltipster-content-changing");
                      setTimeout(function () {
                        if (t.Status !== "hidden") {
                          t.$tooltip.style.webkitTransition =  t.options.speed + "ms";
                          t.$tooltip.style.mozTransition =  t.options.speed + "ms";
                          t.$tooltip.style.oTransition =  t.options.speed + "ms";
                          t.$tooltip.style.msTransition =  t.options.speed + "ms";
                          t.$tooltip.style.tansition = t.options.speed + "ms";
                        }
                      }, t.options.speed);
                    }
                  }, t.options.speed);
                } else {
                  t.$tooltip.style.transition = "opacity " + t.options.speed + "ms"; 
                  t.$tooltip.style.opacity = "0.5";
                  t.$tooltip.addEventListener("ransitionend", function() {
                    if (t.Status != "hidden") {
                      t.$tooltip.fadeTo(t.options.speed, 1);
                      t.$tooltip.style.transition = "opacity " + t.options.speed + "ms";
                      t.$tooltip.style.opacity = "1";
                    }
                  });
                }
              }
            }
          } else {
            t.style.display = "none";
          }
        },
        _repositionInfo: function (e) {
          return {
            dimension: { height: e.offsetHeight, width: e.offsetHeight },
            offset: e.getBoundingClientRect(),
            position: { left: parseInt(getComputedStyle(e).left), top: parseInt(getComputedStyle(e).top) },
          };
        },
        hide: function (n) {
          var r = this;
          if (n) r.callbacks.hide.push(n);
          r.callbacks.show = [];
          clearTimeout(r.timerShow);
          r.timerShow = null;
          clearTimeout(r.timerHide);
          r.timerHide = null;
          var i = function () {
            Array.prototype.forEach.call(r.callbacks.hide, function (e, t) {
              t.call(r.$el);
            });
            r.callbacks.hide = [];
          };
          if (r.Status == "shown" || r.Status == "appearing") {
            r.Status = "disappearing";
            var s = function () {
              r.Status = "hidden";
              if (typeof r.Content == "object" && r.Content !== null) {
                r.Content.detach();
              }
              r.$tooltip.parentNode.removeChild(r.$tooltip);
              r.$tooltip = null;
              e(t).removeEventListener("." + r.namespace);
              e("body").removeEventListener("." + r.namespace)
              e("body").style.overflowX = r.bodyOverflowX;
              e("body").removeEventListener("." + r.namespace);
              r.$elProxy.removeEventListener("." + r.namespace + "-autoClose");
              r.options.functionAfter.call(r.$el, r.$el);
              i();
            };
            if (l()) {
              r.$tooltip.classlist.remove("tooltipster-" + r.options.animation + "-show")
              r.$tooltip.classlist.add("tooltipster-dying");
            }
          } else if (r.Status == "hidden") {
            i();
          }
          return r;
        },
        show: function (e) {
          this._showNow(e);
          return this;
        },
        update: function (e) {
          return this.content(e);
        },
        content: function (e) {
          if (typeof e === "undefined") {
            return this.Content;
          } else {
            this._update(e);
            return this;
          }
        },
        reposition: function () {
          var n = this;
          if (e("body").querySelector(n.$tooltip).length !== 0) {
            n.$tooltip.style.width = "";
            n.elProxyPosition = n._repositionInfo(n.$elProxy);
            var r = null,
              i = parseFloat(getComputedStyle(e(t), null).width.replace("px", "")),
              s = n.elProxyPosition,
              o = n.$tooltip.offsetWidth,
              u = n.$tooltip.offsetWidth + 1,
              a = n.$tooltip.offsetWidth;
            if (n.$elProxy.matches("area")) {
              var f = n.$elProxy.getAttribute("shape"),
                l = n.$elProxy.closest.getAttribute("name"),
                c = e('img[usemap="#' + l + '"]'),
                h = c.getBoundingClientRect().left,
                p = c.getBoundingClientRect().top,
                d = n.$elProxy.getAttribute("coords") !== undefined ? n.$elProxy.getAttribute("coords").split(",") : undefined;
              if (f == "circle") {
                var v = parseInt(d[0]),
                  m = parseInt(d[1]),
                  g = parseInt(d[2]);
                s.dimension.height = g * 2;
                s.dimension.width = g * 2;
                s.offset.top = p + m - g;
                s.offset.left = h + v - g;
              } else if (f == "rect") {
                var v = parseInt(d[0]),
                  m = parseInt(d[1]),
                  y = parseInt(d[2]),
                  b = parseInt(d[3]);
                s.dimension.height = b - m;
                s.dimension.width = y - v;
                s.offset.top = p + m;
                s.offset.left = h + v;
              } else if (f == "poly") {
                var w = [],
                  E = [],
                  S = 0,
                  x = 0,
                  T = 0,
                  N = 0,
                  C = "even";
                for (var k = 0; k < d.length; k++) {
                  var L = parseInt(d[k]);
                  if (C == "even") {
                    if (L > T) {
                      T = L;
                      if (k === 0) {
                        S = T;
                      }
                    }
                    if (L < S) {
                      S = L;
                    }
                    C = "odd";
                  } else {
                    if (L > N) {
                      N = L;
                      if (k == 1) {
                        x = N;
                      }
                    }
                    if (L < x) {
                      x = L;
                    }
                    C = "even";
                  }
                }
                s.dimension.height = N - x;
                s.dimension.width = T - S;
                s.offset.top = p + x;
                s.offset.left = h + S;
              } else {
                s.dimension.height = c.offsetHeight;
                s.dimension.width = c.offsetWidth;
                s.offset.top = p;
                s.offset.left = h;
              }
            }
            var A = 0,
              O = 0,
              M = 0,
              _ = parseInt(n.options.offsetY),
              D = parseInt(n.options.offsetX),
              P = n.options.position;
            function H() {
              var n = e(t).scrollLeft;
              if (A - n < 0) {
                r = A - n;
                A = n;
              }
              if (A + o - n > i) {
                r = A - (i + n - o);
                A = i + n - o;
              }
            }
            function B(n, r) {
              if (s.offset.top - e(t).scrollTop - a - _ - 12 < 0 && r.indexOf("top") > -1) {
                P = n;
              }
              if (s.offset.top + s.dimension.height + a + 12 + _ > e(t).scrollTop + parseFloat(getComputedStyle(e(t), null).height.replace("px", "")) && r.indexOf("bottom") > -1) {
                P = n;
                M = s.offset.top - a - _ - 12;
              }
            }
            if (P == "top") {
              var j = s.offset.left + o - (s.offset.left + s.dimension.width);
              A = s.offset.left + D - j / 2;
              M = s.offset.top - a - _ - 12;
              H();
              B("bottom", "top");
            }
            if (P == "top-left") {
              A = s.offset.left + D;
              M = s.offset.top - a - _ - 12;
              H();
              B("bottom-left", "top-left");
            }
            if (P == "top-right") {
              A = s.offset.left + s.dimension.width + D - o;
              M = s.offset.top - a - _ - 12;
              H();
              B("bottom-right", "top-right");
            }
            if (P == "bottom") {
              var j = s.offset.left + o - (s.offset.left + s.dimension.width);
              A = s.offset.left - j / 2 + D;
              M = s.offset.top + s.dimension.height + _ + 12;
              H();
              B("top", "bottom");
            }
            if (P == "bottom-left") {
              A = s.offset.left + D;
              M = s.offset.top + s.dimension.height + _ + 12;
              H();
              B("top-left", "bottom-left");
            }
            if (P == "bottom-right") {
              A = s.offset.left + s.dimension.width + D - o;
              M = s.offset.top + s.dimension.height + _ + 12;
              H();
              B("top-right", "bottom-right");
            }
            if (P == "left") {
              A = s.offset.left - D - o - 12;
              O = s.offset.left + D + s.dimension.width + 12;
              var F = s.offset.top + a - (s.offset.top + s.dimension.height);
              M = s.offset.top - F / 2 - _;
              if (A < 0 && O + o > i) {
                var I = parseFloat(getComputedStyle(n.$tooltip).borderWidth) * 2,
                  q = o + A - I;
                n.$tooltip.style.width = q + "px";
                a = n.$tooltip.offsetHeight;
                A = s.offset.left - D - q - 12 - I;
                F = s.offset.top + a - (s.offset.top + s.dimension.height);
                M = s.offset.top - F / 2 - _;
              } else if (A < 0) {
                A = s.offset.left + D + s.dimension.width + 12;
                r = "left";
              }
            }
            if (P == "right") {
              A = s.offset.left + D + s.dimension.width + 12;
              O = s.offset.left - D - o - 12;
              var F = s.offset.top + a - (s.offset.top + s.dimension.height);
              M = s.offset.top - F / 2 - _;
              if (A + o > i && O < 0) {
                var I = parseFloat(getComputedStyle(n.$tooltip).borderWidth) * 2,
                  q = i - A - I;
                n.$tooltip.style.width = q + "px";
                a = n.$tooltip.offsetHeight;
                F = s.offset.top + a - (s.offset.top + s.dimension.height);
                M = s.offset.top - F / 2 - _;
              } else if (A + o > i) {
                A = s.offset.left - D - o - 12;
                r = "right";
              }
            }
            if (n.options.arrow) {
              var R = "tooltipster-arrow-" + P;
              if (n.options.arrowColor.length < 1) {
                var U = getComputedStyle(n.$tooltip).backgroundColor;
              } else {
                var U = n.options.arrowColor;
              }
              if (!r) {
                r = "";
              } else if (r == "left") {
                R = "tooltipster-arrow-right";
                r = "";
              } else if (r == "right") {
                R = "tooltipster-arrow-left";
                r = "";
              } else {
                r = "left:" + Math.round(r) + "px;";
              }
              if (P == "top" || P == "top-left" || P == "top-right") {
                var z = parseFloat(getComputedStyle(n.$tooltip).borderbottomWidth);
                  W = n.$tooltip.style.borderBottomColor;
              } else if (P == "bottom" || P == "bottom-left" || P == "bottom-right") {
                var z = parseFloat(getComputedStyle(n.$tooltip).bordertop-width);
                  W = getComputedStyle(n.$tooltip).borderTopColor;
              } else if (P == "left") {
                var z = parseFloat(getComputedStyle(n.$tooltip).borderrightWidth);
                  W = getComputedStyle(n.$tooltip).borderRightColor;
              } else if (P == "right") {
                var z = parseFloat(getComputedStyle(n.$tooltip).borderleftWidth);
                  W = getComputedStyle(n.$tooltip).borderLeftColor;
              } else {
                var z = parseFloat(getComputedStyle(n.$tooltip).borderbottom-width);
                  W = getComputedStyle(n.$tooltip).borderBottomColor;
              }
              if (z > 1) {
                z++;
              }
              var X = "";
              if (z !== 0) {
                var V = "",
                  J = "border-color: " + W + ";";
                if (R.indexOf("bottom") !== -1) {
                  V = "margin-top: -" + Math.round(z) + "px;";
                } else if (R.indexOf("top") !== -1) {
                  V = "margin-bottom: -" + Math.round(z) + "px;";
                } else if (R.indexOf("left") !== -1) {
                  V = "margin-right: -" + Math.round(z) + "px;";
                } else if (R.indexOf("right") !== -1) {
                  V = "margin-left: -" + Math.round(z) + "px;";
                }
                X = '<span class="tooltipster-arrow-border" style="' + V + " " + J + ';"></span>';
              }
              var tooltipsterArrow = n.$tooltip.querySelector(".tooltipster-arrow");
              tooltipsterArrow.parentNode.removeChild(tooltipsterArrow);
              var K = '<div class="' + R + ' tooltipster-arrow" style="' + r + '">' + X + '<span style="border-color:' + U + ';"></span></div>';
              n.$tooltip.appendChild(K);
            }
            n.$tooltip.style.top = Math.round(M) + "px";
            n.$tooltip.style.left  = Math.round(A) + "px";
          }
          return n;
        },
        enable: function () {
          this.enabled = true;
          return this;
        },
        disable: function () {
          this.hide();
          this.enabled = false;
          return this;
        },
        destroy: function () {
          var t = this;
          t.hide();
          if (t.$el[0] !== t.$elProxy[0]) {
            t.$elProxy.parentNode.removeChild(t.$elProxy);
          }
          t.$el.removeAttribute("data-" + t.namespace);
          t.$el.removeEventListener("." + t.namespace);
          var n = t.$el.getAttribute("data-tooltipster-ns");
          if (n.length === 1) {
            var r = null;
            if (t.options.restoration === "previous") {
              r = t.$el.getAttribute("data-tooltipster-initialTitle");
            } else if (t.options.restoration === "current") {
              r = typeof t.Content === "string" ? t.Content : e("<div></div>").appendChild(t.Content).innerHTML;
            }
            if (r) {
              t.$el.setAttriute("title", r);
            }
            t.$el.classlist.remove("tooltipstered");
            t.$el.removeAttribute("data-tooltipster-ns");
            t.$el.removeAttribute("data-tooltipster-initialTitle");
          } else {
            n = e.grep(n, function (e, n) {
              return e !== t.namespace;
            });
            t.$el.setAttriute("data-tooltipster-ns", n);
          }
          return t;
        },
        elementIcon: function () {
          return this.$el[0] !== this.$elProxy[0] ? this.$elProxy[0] : undefined;
        },
        elementTooltip: function () {
          return this.$tooltip ? this.$tooltip[0] : undefined;
        },
        option: function (e, t) {
          if (typeof t == "undefined") return this.options[e];
          else {
            this.options[e] = t;
            return this;
          }
        },
        status: function () {
          return this.Status;
        },
      };
      e.fn[r] = function () {
        var t = arguments;
        if (this.length === 0) {
          if (typeof t[0] === "string") {
            var n = true;
            switch (t[0]) {
              case "setDefaults":
                e.extend(i, t[1]);
                break;
              default:
                n = false;
                break;
            }
            if (n) return true;
            else return this;
          } else {
            return this;
          }
        } else {
          if (typeof t[0] === "string") {
            var r = "#*$~&";
            Array.prototype.forEach.call(this, function () {
              var n = e(this).getAttribute("data-tooltipster-ns"),
                i = n ? e(this).getAttribute("data-" + n[0]) : null;
              if (i) {
                if (typeof i[t[0]] === "function") {
                  var s = i[t[0]](t[1], t[2]);
                } else {
                  throw new Error('Unknown method .tooltipster("' + t[0] + '")');
                }
                if (s !== i) {
                  r = s;
                  return false;
                }
              } else {
                throw new Error("You called Tooltipster's \"" + t[0] + '" method on an uninitialized element');
              }
            });
            return r !== "#*$~&" ? r : this;
          } else {
            var o = [],
              u = t[0] && typeof t[0].multiple !== "undefined",
              a = (u && t[0].multiple) || (!u && i.multiple),
              f = t[0] && typeof t[0].debug !== "undefined",
              l = (f && t[0].debug) || (!f && i.debug);
              Array.prototype.forEach.call(this, function () {
              var n = false,
                r = e(this).getAttribute("data-tooltipster-ns"),
                i = null;
              if (!r) {
                n = true;
              } else if (a) {
                n = true;
              } else if (l) {
                /*console.log('Tooltipster: one or more tooltips are already attached to this element: ignoring. Use the "multiple" option to attach more tooltips.')*/
              }
              if (n) {
                i = new s(this, t[0]);
                if (!r) r = [];
                r.push(i.namespace);
                e(this).setAttriute("data-tooltipster-ns", r);
                e(this).setAttriute("data-" + i.namespace, i);
              }
              o.push(i);
            });
            if (a) return o;
            else return this;
          }
        }
      };
      var u = !!("ontouchstart" in t);
      var a = false;
      document.querySelector("body").addEventListener("mousemove", function () {
        a = true;
      });
    })(jQuery, window, document);
    